package recurly

import (
	"encoding/xml"
	"fmt"
	"net"
)

type (
	// billingService handles all interaction with the billing info portion
	// of the recurly API.
	billingService struct {
		client *Client
	}

	// Billing represents billing info for a single account on your site
	Billing struct {
		XMLName          xml.Name `xml:"billing_info"`
		FirstName        string   `xml:"first_name,omitempty"`
		LastName         string   `xml:"last_name,omitempty"`
		Address          string   `xml:"address1,omitempty"`
		Address2         string   `xml:"address2,omitempty"`
		City             string   `xml:"city,omitempty"`
		State            string   `xml:"state,omitempty"`
		Country          string   `xml:"country,omitempty"`
		Zip              string   `xml:"zip,omitempty"`
		Phone            string   `xml:"phone,omitempty"`
		VATNumber        string   `xml:"vat_number,omitempty"`
		IPAddress        net.IP   `xml:"ip_address,omitempty"`
		IPAddressCountry string   `xml:"ip_address_country,omitempty"`

		// Credit Card Info
		FirstSix int    `xml:"first_six,omitempty"`
		LastFour int    `xml:"last_four,omitempty"`
		CardType string `xml:"card_type,omitempty"`
		Month    int    `xml:"month,omitempty"`
		Year     int    `xml:"year,omitempty"`
		// VerificationValue is only used for create/update only. A Verification
		// Value will never be returned on read.
		VerificationValue int `xml:"verification_value,omitempty"`

		// Paypal
		PaypalAgreementID string `xml:"paypal_billing_agreement_id,omitempty"`

		// Amazon
		AmazonAgreementID string `xml:"amazon_billing_agreement_id,omitempty"`

		// Bank Account
		NameOnAccount string `xml:"name_on_account,omitempty"`
		RoutingNumber int    `xml:"routing_number,omitempty"`
		AccountNumber int    `xml:"account_number,omitempty"`
		AccountType   string `xml:"account_type,omitempty"`

		// Token is used for create/update only. A token will never be returned
		// on read.
		Token string `xml:"token_id,omitempty"`
	}
)

// Type returns the billing info type. Currently options: card, bank, ""
func (b Billing) Type() string {
	if b.FirstSix > 0 && b.LastFour > 0 && b.Month > 0 && b.Year > 0 {
		return "card"
	}

	if b.NameOnAccount != "" && b.RoutingNumber > 0 && b.AccountNumber > 0 {
		return "bank"
	}

	return ""
}

// Get returns only the account's current billing information.
// https://docs.recurly.com/api/billing-info#lookup-billing-info
func (bs billingService) Get(accountCode string) (*Response, Billing, error) {
	action := fmt.Sprintf("accounts/%s/billing_info", accountCode)
	req, err := bs.client.newRequest("GET", action, nil, nil)
	if err != nil {
		return nil, Billing{}, err
	}

	var b Billing
	res, err := bs.client.do(req, &b)

	return res, b, err
}

// CreateWithToken creates an account's Billing Information using a token
// generated by Recurly.js. Returns the account's created Billing Information.
// https://docs.recurly.com/api/billing-info#create-billing-info-token
func (bs billingService) CreateWithToken(accountCode string, token string) (*Response, Billing, error) {
	action := fmt.Sprintf("accounts/%s/billing_info", accountCode)
	req, err := bs.client.newRequest("POST", action, nil, Billing{Token: token})
	if err != nil {
		return nil, Billing{}, err
	}

	var b Billing
	res, err := bs.client.do(req, &b)

	return res, b, err
}

// CreateWithCC creates the account's Billing Information with credit card info.
// It is recommended you use recurly.js and a token with the CreateWithToken
// method instead.
// https://docs.recurly.com/api/billing-info#create-billing-info-credit-card
func (bs billingService) CreateWithCC(accountCode string, params Params) {
	// @todo
}

// CreateWithBankAccount creates the account's Billing Information with Bank
// Account details. You will need to have the ACH feature on your site for this call to work.
// https://docs.recurly.com/api/billing-info#create-billing-info-bank-account
func (bs billingService) CreateWithBankAccount(accountCode string, params Params) {
	// @todo
}

// UpdateWithToken updates an account's Billing Information using a token
// generated by Recurly.js. Returns the account's created Billing Information.
// https://docs.recurly.com/api/billing-info#update-billing-info-token
func (bs billingService) UpdateWithToken(accountCode string, token string) (*Response, Billing, error) {
	action := fmt.Sprintf("accounts/%s/billing_info", accountCode)
	req, err := bs.client.newRequest("PUT", action, nil, Billing{Token: token})
	if err != nil {
		return nil, Billing{}, err
	}

	var b Billing
	res, err := bs.client.do(req, &b)

	return res, b, err
}

// UpdateWithCC updates the account's Billing Information with credit card info.
// It is recommended you use recurly.js and a token with the UpdateWithToken
// method instead.
// https://docs.recurly.com/api/billing-info#create-billing-info-credit-card
func (bs billingService) UpdateWithCC(accountCode string, params Params) {
	// @todo
}

// UpdateWithBankAccount updates the account's Billing Information with Bank
// Account details. You will need to have the ACH feature on your site for this call to work.
// https://docs.recurly.com/api/billing-info#create-billing-info-bank-account
func (bs billingService) UpdateWithBankAccount(accountCode string, params Params) {
	// @todo
}

// Clear removes any stored billing information for an account. If the account
// has a subscription, the renewal will go into past due unless you update the
// billing info before the renewal occurs.
// https://docs.recurly.com/api/billing-info#clear-billing-info
func (bs billingService) Clear(accountCode string) (*Response, error) {
	action := fmt.Sprintf("accounts/%s/billing_info", accountCode)
	req, err := bs.client.newRequest("DELETE", action, nil, nil)
	if err != nil {
		return nil, err
	}

	return bs.client.do(req, nil)
}
