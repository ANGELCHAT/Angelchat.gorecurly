package recurly

import (
	"encoding/xml"
	"fmt"
	"net"
)

type (
	// BillingService handles all interaction with the billing info portion
	// of the recurly API.
	BillingService struct {
		client *Client
	}

	// Billing represents billing info for a single account on your site
	Billing struct {
		XMLName          xml.Name `xml:"billing_info"`
		FirstName        string   `xml:"first_name,omitempty"`
		LastName         string   `xml:"last_name,omitempty"`
		Company          string   `xml:"company,omitempty"`
		Address          string   `xml:"address1,omitempty"`
		Address2         string   `xml:"address2,omitempty"`
		City             string   `xml:"city,omitempty"`
		State            string   `xml:"state,omitempty"`
		Zip              string   `xml:"zip,omitempty"`
		Country          string   `xml:"country,omitempty"`
		Phone            string   `xml:"phone,omitempty"`
		VATNumber        string   `xml:"vat_number,omitempty"`
		IPAddress        net.IP   `xml:"ip_address,omitempty"`
		IPAddressCountry string   `xml:"ip_address_country,omitempty"`

		// Credit Card Info
		FirstSix int    `xml:"first_six,omitempty"`
		LastFour int    `xml:"last_four,omitempty"`
		CardType string `xml:"card_type,omitempty"`
		Number   int    `xml:"number,omitempty"`
		Month    int    `xml:"month,omitempty"`
		Year     int    `xml:"year,omitempty"`
		// VerificationValue is only used for create/update only. A Verification
		// Value will never be returned on read.
		VerificationValue int `xml:"verification_value,omitempty"`

		// Paypal
		PaypalAgreementID string `xml:"paypal_billing_agreement_id,omitempty"`

		// Amazon
		AmazonAgreementID string `xml:"amazon_billing_agreement_id,omitempty"`

		// Bank Account
		// Note: routing numbers and account numbers may start with zeros, so need
		// to treat them as strings
		NameOnAccount string `xml:"name_on_account,omitempty"`
		RoutingNumber string `xml:"routing_number,omitempty"`
		AccountNumber string `xml:"account_number,omitempty"`
		AccountType   string `xml:"account_type,omitempty"`

		// Token is used for create/update only. A token will never be returned
		// on read.
		Token string `xml:"token_id,omitempty"`
	}
)

// Type returns the billing info type. Currently options: card, bank, ""
func (b Billing) Type() string {
	if b.FirstSix > 0 && b.LastFour > 0 && b.Month > 0 && b.Year > 0 {
		return "card"
	} else if b.NameOnAccount != "" && b.RoutingNumber != "" && b.AccountNumber != "" {
		return "bank"
	}

	return ""
}

// Get returns only the account's current billing information.
// https://docs.recurly.com/api/billing-info#lookup-billing-info
func (s *BillingService) Get(accountCode string) (*Response, *Billing, error) {
	action := fmt.Sprintf("accounts/%s/billing_info", accountCode)
	req, err := s.client.newRequest("GET", action, nil, nil)
	if err != nil {
		return nil, nil, err
	}

	var dst Billing
	resp, err := s.client.do(req, &dst)

	return resp, &dst, err
}

// Create creates the account's billing information with credit card or
// bank account info. It is recommended you use recurly.js and a token with the CreateWithToken
// method instead.
// https://dev.recurly.com/docs/create-an-accounts-billing-info-credit-card
// https://dev.recurly.com/docs/create-an-accounts-billing-info-bank-account
func (s *BillingService) Create(accountCode string, b Billing) (*Response, *Billing, error) {
	action := fmt.Sprintf("accounts/%s/billing_info", accountCode)
	req, err := s.client.newRequest("POST", action, nil, b)
	if err != nil {
		return nil, nil, err
	}

	var dst Billing
	resp, err := s.client.do(req, &dst)

	return resp, &dst, err
}

// CreateWithToken creates an account's billing information using a token
// generated by Recurly.js. Returns the account's created Billing Information.
// https://docs.recurly.com/api/billing-info#create-billing-info-token
func (s *BillingService) CreateWithToken(accountCode string, token string) (*Response, *Billing, error) {
	action := fmt.Sprintf("accounts/%s/billing_info", accountCode)
	req, err := s.client.newRequest("POST", action, nil, Billing{Token: token})
	if err != nil {
		return nil, nil, err
	}

	var dst Billing
	resp, err := s.client.do(req, &dst)

	return resp, &dst, err
}

// Update updates the account's billing information with credit card or
// bank info.It is recommended you use recurly.js and a token with the
// UpdateWithToken method instead.
// https://dev.recurly.com/docs/update-an-accounts-billing-info-credit-card
// https://dev.recurly.com/docs/update-an-accounts-billing-info-bank-account
func (s *BillingService) Update(accountCode string, b Billing) (*Response, *Billing, error) {
	// Create clean billing object with write-only fields to avoid errors
	// like sending additional/unknown/read-only fields.
	clean := Billing{
		FirstName:         b.FirstName,
		LastName:          b.LastName,
		Address:           b.Address,
		Address2:          b.Address2,
		City:              b.City,
		State:             b.State,
		Zip:               b.Zip,
		Country:           b.Country,
		Phone:             b.Phone,
		VATNumber:         b.VATNumber,
		IPAddress:         b.IPAddress,
		Number:            b.Number,
		Month:             b.Month,
		Year:              b.Year,
		VerificationValue: b.VerificationValue,
		NameOnAccount:     b.NameOnAccount,
		RoutingNumber:     b.RoutingNumber,
		AccountNumber:     b.AccountNumber,
		AccountType:       b.AccountType,
	}

	action := fmt.Sprintf("accounts/%s/billing_info", accountCode)
	req, err := s.client.newRequest("PUT", action, nil, clean)
	if err != nil {
		return nil, nil, err
	}

	var dst Billing
	resp, err := s.client.do(req, &dst)

	return resp, &dst, err
}

// UpdateWithToken updates an account's billing information using a token
// generated by Recurly.js. Returns the account's created Billing Information.
// https://docs.recurly.com/api/billing-info#update-billing-info-token
func (s *BillingService) UpdateWithToken(accountCode string, token string) (*Response, *Billing, error) {
	action := fmt.Sprintf("accounts/%s/billing_info", accountCode)
	req, err := s.client.newRequest("PUT", action, nil, Billing{Token: token})
	if err != nil {
		return nil, nil, err
	}

	var dst Billing
	resp, err := s.client.do(req, &dst)

	return resp, &dst, err
}

// Clear removes any stored billing information for an account. If the account
// has a subscription, the renewal will go into past due unless you update the
// billing info before the renewal occurs.
// https://docs.recurly.com/api/billing-info#clear-billing-info
func (s *BillingService) Clear(accountCode string) (*Response, error) {
	action := fmt.Sprintf("accounts/%s/billing_info", accountCode)
	req, err := s.client.newRequest("DELETE", action, nil, nil)
	if err != nil {
		return nil, err
	}

	return s.client.do(req, nil)
}
